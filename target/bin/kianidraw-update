#!/bin/sh
PROG_NAME=$(basename $0)
MSG_PREFIX="$PROG_NAME[$(basename "$(pwd)")]"
. /usr/local/lib/kianidraw-common

is_structure_ok || exit_bad_location "$PROG_NAME"

test -n "$1" || exit_bad_args "Usage: $PROG_NAME all | <resourceName>..."

to_update=""
for arg; do
	if test X"$arg" = Xall; then
		to_update="$to_update $(kianidraw-get resources)"
	else
		test -f $INTERNAL_IN_D/"$arg.d/$arg.xcf" || {
			echo "$MSG_PREFIX: warning: \"$arg\": resource not found => skipped" >&2
			continue
		}
		to_update="$to_update $arg"
	fi
done

convert_xcf_to_pngs() {
	infile=$1
	outfiles_dir=$2

	{
		cat <<END
def convert(infile, outfiles_dir):
	img = pdb.gimp_file_load(infile, infile)
	for layer in img.layers:
		outfile = outfiles_dir + "/" + layer.name + ".png"
		print(layer.name)
		pdb.gimp_file_save(img, layer, outfile, outfile)
	pdb.gimp_image_delete(img)
END
		echo "convert(\"$infile\", \"$outfiles_dir\")"
		echo "pdb.gimp_quit(1)"
	} | gimp -i --batch-interpreter=python-fu-eval -b -
}

for u in $to_update; do
	echo $u
done | uniq \
| while read resource; do
	echo "$MSG_PREFIX: processing elements for \"$resource\"â€¦"

	rm -f $INTERNAL_IN_D/$resource.d/*.png
	convert_xcf_to_pngs $INTERNAL_IN_D/$resource.d/$resource.xcf $INTERNAL_IN_D/$resource.d
done
