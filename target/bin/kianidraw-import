#!/bin/sh
PROG_NAME=$(basename $0)
MSG_PREFIX="$PROG_NAME[$(basename "$(pwd)")]"
. /usr/local/lib/kianidraw-common

is_structure_ok || exit_bad_location "$PROG_NAME"

working_size_max=$(kianidraw-get config/working_size_max) || exit 1
expr "$working_size_max" : "[0-9]\{2,\}x[0-9]\{2,\}" >/dev/null \
|| exit_error "$MSG_PREFIX: config/working_size_max: bad value format"

move=false
test X"$1" = X"-m" && {
	move=true
	shift
}

test $# -ge 2 && test $(expr $# % 2) -eq 0 \
|| exit_bad_args "Usage: $PROG_NAME [-m] (<file> <resourceName>)..."

while test $# -gt 0; do
	test -r "$1" || {
		echo "$MSG_PREFIX: warning: \"$1\": unreadable file => skipped" >&2
		shift 2
		continue
	}

	sum=$(cksum "$1" | awk '{print $1}')
	! $(ls -A $EXTERNAL_IN_D | grep -q $sum) || {
		echo "$MSG_PREFIX: warning: \"$1\": file already imported => skipped" >&2
		shift 2
		continue
	}

	test X$(expr "$2" : "\([_a-zA-Z0-9][-_.a-zA-Z0-9]*\)") = X"$2" >/dev/null || {
		echo "$MSG_PREFIX: warning: \"$2\": bad resource name format => skipped" >&2
		shift 2
		continue
	}

	case $2 in
	all)
		echo "$MSG_PREFIX: warning: \"$2\": reserved keyword => skipped" >&2
		shift 2
		continue
	esac

	! test -f $INTERNAL_IN_D/$2 || {
		echo "$MSG_PREFIX: warning: \"$2\": resource name already in use => skipped" >&2
		shift 2
		continue
	}

	new_filename=${sum}_$(basename $1)
	if $move; then
		mv "$1" $EXTERNAL_IN_D/"$new_filename"
	else
		cp "$1" $EXTERNAL_IN_D/"$new_filename"
	fi

	ln -s $(return_path $INTERNAL_IN_D)/$EXTERNAL_IN_D/"$new_filename" $INTERNAL_IN_D/$2
	mkdir $INTERNAL_IN_D/$2.d
	convert -resize $working_size_max $INTERNAL_IN_D/$2 $INTERNAL_IN_D/$2.d/$2.xcf

	echo "$MSG_PREFIX: imported \"$1\" as \"$2\""
	shift 2
done
