#!/bin/sh
PROG_NAME=$(basename $0)
MSG_PREFIX="$PROG_NAME[$(basename "$(pwd)")]"
INTERNAL_IN=.kianidraw/in

exit_bad_location() {
	echo "$PROG_NAME: not in a valid/usable kianidraw project, please cd and/or check permissions" >&2
	exit 1
}

test -d $INTERNAL_IN || exit_bad_location
find . -type d -exec chmod u+rwx {} \; || exit_bad_location
find . -type f -exec chmod u+rw  {} \; || exit_bad_location

test -n "$1" || {
	echo "$MSG_PREFIX: at least 1 arg required: all|<resourceName>..." >&2
	exit 64
}

cd $INTERNAL_IN

to_update=""
for arg; do
	if test X"$arg" = Xall; then
		to_update="$to_update $(find . ! -name . -prune -type l | sed 's/^\.\///')"
	else
		test -f "$arg.d/$arg.xcf" || {
			echo "$MSG_PREFIX: warning: \"$arg\": resource not found => skipped" >&2
			continue
		}
		to_update="$to_update $arg"
	fi
done

convert_xcf_to_pngs() {
	infile=$1
	outfiles_dir=$2

	{
		cat <<END
def convert(infile, outfiles_dir):
	img = pdb.gimp_file_load(infile, infile)
	for layer in img.layers:
		outfile = outfiles_dir + "/" + layer.name + ".png"
		print(layer.name)
		pdb.gimp_file_save(img, layer, outfile, outfile)
	pdb.gimp_image_delete(img)
END
		echo "convert(\"$infile\", \"$outfiles_dir\")"
		echo "pdb.gimp_quit(1)"
	} | gimp -i --batch-interpreter=python-fu-eval -b -
}

for u in $to_update; do
	echo $u
done | uniq | while read resource; do
	echo "$MSG_PREFIX: processing elements for \"$resource\"â€¦"
	rm -f $resource.d/*.png
	convert_xcf_to_pngs $resource.d/$resource.xcf $resource.d
done
